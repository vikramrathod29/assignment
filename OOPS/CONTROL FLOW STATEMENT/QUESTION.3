3. Control Flow Statements
Q - 1. What are conditional statements in C++? Explain the if-else and
switch statements.
Ans. Condition statements in c++ control the flow of a program based on
specific conditions. These conditions are usully boolean true or false. if the
condition true a specific bloack of code are excueted, otherwise, another
block is excuete.
----> The main conditional statement in c++
1. if - else statement
 2. switch statement
1. if - else statement
i. simple if - else statement
ex. if (condition){
 code } else {
 code }
ii. ladder if - else statement
ex. if (condition){
 code } else if (condition ){
 code }
iii. nested if - else statement
ex.if(condition){
if(condition ){
10
code }
}
2. switch statement
ex. switch(expression)
 { case 1 :
// code
break;
case 2 :
// code
break;
defualt : // code
 }
Q - 2. What is the difference between for, while, and do-while loops in
C++?
Ans. Loops are used to in c++ to repeatedly execte a block of code as long
as a specific condition is true.
----> The main types of loop in c++ are for, while , do while.
1. for loop : Used the number of iterations is known before hand or you
want to control the loop.
ex. for(initialization,condition, increment/decrement)
11
{ //code }
2.while loop : Used the number of iterations is not known in advance and
depends on a condition.
ex.while(condition)
{ // code }
3.do while loop : Used the loop must execute at least one regardless of the
condition.
ex. do {
// code } while(condition)
Q - 3. How are break and continue statements used in loops? Provide
examples.
Ans.
1. break statement : Break statement used to loop and switch statement.
The break statement is used to termineted the loop imedeatlly and exit for
loop or execute next codition. and used to switch case statement in cheak
to case and execute this code and condition are false to break the the code.
ex.#include<iostream>
using namespace std;
int main(){
int i,num = 10;
for(i = 1; i <= num; i++){
if(i == 5){
12
break; }
}
cout<<"\nThe number = "<< i ;
return 0;
}
2. countinue statement : Countinue statement used to skip the cuurent
inertion of the loop and move to next inertion. used countionue statement
is ignored the inertion.
ex.#include<iostream>
using namespace std;
int main(){
int i,num = 10;
for(i = 1; i <= num; i++){
if(i == 5){
countinue; }
}
cout<<"\nThe number = "<< i ;
return 0;
}
Q - 4. Explain nested control structures with an example.
Ans.Nested control structures like loops, conditional statements, or
switches is placed inside another.
13
1.Nested if statement : an if satatement in other if or else block.
#include<iostream>
using namespace std;
int main()
{
 int num1,num2,num3;
cout<<"\nEnter the num1 value = ";
cin>>num1;
cout<<"\nEnter the num2 value = ";
cin>>num2;
cout<<"\nEnter the num3 value = ";
cin>>num3;
 if(num1>num2)
 {

 if(num1>num3)
 {
 cout<<"\nnum1 is the biggest number = "<<num1;
 }
 else
 {
14
 cout<<"\nnum3 is the biggest number = "<<num3;
 }
 } else
{
 if(num2>num1)
 {
 if(num2>num3)
 {
 cout<<"\nnum2 is the biggest number = "<<num2;
 }
 else
 {
 cout<<"\nnum3 is biggest number = "<<num3;
 }
 }
 }
return 0;
}
2. Nested loop statement : an loop inside another loop.
ex.
#include<iostream>
15
using namespce std;
int main()
{
int row,colm,i,j;
cout<<"\nEnter the row = ";
cin>>row;
cout<<"\nEnter the colm = ";
cin>>colm;
for(i=1;i<=row;i++)
{
for(j=1;j<=colm;j++)
{
cout<<"* ";
}
cout<<"\n";
}
return 0;
}
